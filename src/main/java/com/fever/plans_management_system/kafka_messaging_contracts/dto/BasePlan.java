/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fever.plans_management_system.kafka_messaging_contracts.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BasePlan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7048833813567783250L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BasePlan\",\"namespace\":\"com.fever.plans_management_system.kafka_messaging_contracts.dto\",\"fields\":[{\"name\":\"basePlanId\",\"type\":\"long\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"sellMode\",\"type\":\"string\"},{\"name\":\"organizerCompanyId\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BasePlan> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BasePlan> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BasePlan> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BasePlan> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BasePlan> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BasePlan to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BasePlan from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BasePlan instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BasePlan fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long basePlanId;
  private java.lang.CharSequence title;
  private java.lang.CharSequence sellMode;
  private java.lang.Long organizerCompanyId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BasePlan() {}

  /**
   * All-args constructor.
   * @param basePlanId The new value for basePlanId
   * @param title The new value for title
   * @param sellMode The new value for sellMode
   * @param organizerCompanyId The new value for organizerCompanyId
   */
  public BasePlan(java.lang.Long basePlanId, java.lang.CharSequence title, java.lang.CharSequence sellMode, java.lang.Long organizerCompanyId) {
    this.basePlanId = basePlanId;
    this.title = title;
    this.sellMode = sellMode;
    this.organizerCompanyId = organizerCompanyId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return basePlanId;
    case 1: return title;
    case 2: return sellMode;
    case 3: return organizerCompanyId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: basePlanId = (java.lang.Long)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: sellMode = (java.lang.CharSequence)value$; break;
    case 3: organizerCompanyId = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'basePlanId' field.
   * @return The value of the 'basePlanId' field.
   */
  public long getBasePlanId() {
    return basePlanId;
  }


  /**
   * Sets the value of the 'basePlanId' field.
   * @param value the value to set.
   */
  public void setBasePlanId(long value) {
    this.basePlanId = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'sellMode' field.
   * @return The value of the 'sellMode' field.
   */
  public java.lang.CharSequence getSellMode() {
    return sellMode;
  }


  /**
   * Sets the value of the 'sellMode' field.
   * @param value the value to set.
   */
  public void setSellMode(java.lang.CharSequence value) {
    this.sellMode = value;
  }

  /**
   * Gets the value of the 'organizerCompanyId' field.
   * @return The value of the 'organizerCompanyId' field.
   */
  public java.lang.Long getOrganizerCompanyId() {
    return organizerCompanyId;
  }


  /**
   * Sets the value of the 'organizerCompanyId' field.
   * @param value the value to set.
   */
  public void setOrganizerCompanyId(java.lang.Long value) {
    this.organizerCompanyId = value;
  }

  /**
   * Creates a new BasePlan RecordBuilder.
   * @return A new BasePlan RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder newBuilder() {
    return new com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder();
  }

  /**
   * Creates a new BasePlan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BasePlan RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder(other);
    }
  }

  /**
   * Creates a new BasePlan RecordBuilder by copying an existing BasePlan instance.
   * @param other The existing instance to copy.
   * @return A new BasePlan RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder(other);
    }
  }

  /**
   * RecordBuilder for BasePlan instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BasePlan>
    implements org.apache.avro.data.RecordBuilder<BasePlan> {

    private long basePlanId;
    private java.lang.CharSequence title;
    private java.lang.CharSequence sellMode;
    private java.lang.Long organizerCompanyId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.basePlanId)) {
        this.basePlanId = data().deepCopy(fields()[0].schema(), other.basePlanId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sellMode)) {
        this.sellMode = data().deepCopy(fields()[2].schema(), other.sellMode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.organizerCompanyId)) {
        this.organizerCompanyId = data().deepCopy(fields()[3].schema(), other.organizerCompanyId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing BasePlan instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.basePlanId)) {
        this.basePlanId = data().deepCopy(fields()[0].schema(), other.basePlanId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sellMode)) {
        this.sellMode = data().deepCopy(fields()[2].schema(), other.sellMode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.organizerCompanyId)) {
        this.organizerCompanyId = data().deepCopy(fields()[3].schema(), other.organizerCompanyId);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'basePlanId' field.
      * @return The value.
      */
    public long getBasePlanId() {
      return basePlanId;
    }


    /**
      * Sets the value of the 'basePlanId' field.
      * @param value The value of 'basePlanId'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder setBasePlanId(long value) {
      validate(fields()[0], value);
      this.basePlanId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'basePlanId' field has been set.
      * @return True if the 'basePlanId' field has been set, false otherwise.
      */
    public boolean hasBasePlanId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'basePlanId' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder clearBasePlanId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellMode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSellMode() {
      return sellMode;
    }


    /**
      * Sets the value of the 'sellMode' field.
      * @param value The value of 'sellMode'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder setSellMode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sellMode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sellMode' field has been set.
      * @return True if the 'sellMode' field has been set, false otherwise.
      */
    public boolean hasSellMode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sellMode' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder clearSellMode() {
      sellMode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizerCompanyId' field.
      * @return The value.
      */
    public java.lang.Long getOrganizerCompanyId() {
      return organizerCompanyId;
    }


    /**
      * Sets the value of the 'organizerCompanyId' field.
      * @param value The value of 'organizerCompanyId'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder setOrganizerCompanyId(java.lang.Long value) {
      validate(fields()[3], value);
      this.organizerCompanyId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'organizerCompanyId' field has been set.
      * @return True if the 'organizerCompanyId' field has been set, false otherwise.
      */
    public boolean hasOrganizerCompanyId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'organizerCompanyId' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder clearOrganizerCompanyId() {
      organizerCompanyId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BasePlan build() {
      try {
        BasePlan record = new BasePlan();
        record.basePlanId = fieldSetFlags()[0] ? this.basePlanId : (java.lang.Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sellMode = fieldSetFlags()[2] ? this.sellMode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.organizerCompanyId = fieldSetFlags()[3] ? this.organizerCompanyId : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BasePlan>
    WRITER$ = (org.apache.avro.io.DatumWriter<BasePlan>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BasePlan>
    READER$ = (org.apache.avro.io.DatumReader<BasePlan>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.basePlanId);

    out.writeString(this.title);

    out.writeString(this.sellMode);

    if (this.organizerCompanyId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.organizerCompanyId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.basePlanId = in.readLong();

      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.sellMode = in.readString(this.sellMode instanceof Utf8 ? (Utf8)this.sellMode : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.organizerCompanyId = null;
      } else {
        this.organizerCompanyId = in.readLong();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.basePlanId = in.readLong();
          break;

        case 1:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 2:
          this.sellMode = in.readString(this.sellMode instanceof Utf8 ? (Utf8)this.sellMode : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.organizerCompanyId = null;
          } else {
            this.organizerCompanyId = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










