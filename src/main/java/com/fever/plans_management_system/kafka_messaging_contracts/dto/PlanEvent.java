/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fever.plans_management_system.kafka_messaging_contracts.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlanEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1981502592621477886L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanEvent\",\"namespace\":\"com.fever.plans_management_system.kafka_messaging_contracts.dto\",\"fields\":[{\"name\":\"planId\",\"type\":\"long\"},{\"name\":\"basePlan\",\"type\":{\"type\":\"record\",\"name\":\"BasePlan\",\"fields\":[{\"name\":\"basePlanId\",\"type\":\"long\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"sellMode\",\"type\":\"string\"},{\"name\":\"organizerCompanyId\",\"type\":[\"null\",\"long\"],\"default\":null}]}},{\"name\":\"startDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"endDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"sellFrom\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"sellTo\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"soldOut\",\"type\":\"boolean\"},{\"name\":\"zones\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Zone\",\"fields\":[{\"name\":\"zoneId\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"capacity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"numbered\",\"type\":\"boolean\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PlanEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlanEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlanEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlanEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlanEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlanEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlanEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlanEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long planId;
  private com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan basePlan;
  private java.time.Instant startDate;
  private java.time.Instant endDate;
  private java.time.Instant sellFrom;
  private java.time.Instant sellTo;
  private boolean soldOut;
  private java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> zones;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanEvent() {}

  /**
   * All-args constructor.
   * @param planId The new value for planId
   * @param basePlan The new value for basePlan
   * @param startDate The new value for startDate
   * @param endDate The new value for endDate
   * @param sellFrom The new value for sellFrom
   * @param sellTo The new value for sellTo
   * @param soldOut The new value for soldOut
   * @param zones The new value for zones
   */
  public PlanEvent(java.lang.Long planId, com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan basePlan, java.time.Instant startDate, java.time.Instant endDate, java.time.Instant sellFrom, java.time.Instant sellTo, java.lang.Boolean soldOut, java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> zones) {
    this.planId = planId;
    this.basePlan = basePlan;
    this.startDate = startDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.endDate = endDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.sellFrom = sellFrom.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.sellTo = sellTo.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.soldOut = soldOut;
    this.zones = zones;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return planId;
    case 1: return basePlan;
    case 2: return startDate;
    case 3: return endDate;
    case 4: return sellFrom;
    case 5: return sellTo;
    case 6: return soldOut;
    case 7: return zones;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: planId = (java.lang.Long)value$; break;
    case 1: basePlan = (com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan)value$; break;
    case 2: startDate = (java.time.Instant)value$; break;
    case 3: endDate = (java.time.Instant)value$; break;
    case 4: sellFrom = (java.time.Instant)value$; break;
    case 5: sellTo = (java.time.Instant)value$; break;
    case 6: soldOut = (java.lang.Boolean)value$; break;
    case 7: zones = (java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'planId' field.
   * @return The value of the 'planId' field.
   */
  public long getPlanId() {
    return planId;
  }


  /**
   * Sets the value of the 'planId' field.
   * @param value the value to set.
   */
  public void setPlanId(long value) {
    this.planId = value;
  }

  /**
   * Gets the value of the 'basePlan' field.
   * @return The value of the 'basePlan' field.
   */
  public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan getBasePlan() {
    return basePlan;
  }


  /**
   * Sets the value of the 'basePlan' field.
   * @param value the value to set.
   */
  public void setBasePlan(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan value) {
    this.basePlan = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public java.time.Instant getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(java.time.Instant value) {
    this.startDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return The value of the 'endDate' field.
   */
  public java.time.Instant getEndDate() {
    return endDate;
  }


  /**
   * Sets the value of the 'endDate' field.
   * @param value the value to set.
   */
  public void setEndDate(java.time.Instant value) {
    this.endDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'sellFrom' field.
   * @return The value of the 'sellFrom' field.
   */
  public java.time.Instant getSellFrom() {
    return sellFrom;
  }


  /**
   * Sets the value of the 'sellFrom' field.
   * @param value the value to set.
   */
  public void setSellFrom(java.time.Instant value) {
    this.sellFrom = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'sellTo' field.
   * @return The value of the 'sellTo' field.
   */
  public java.time.Instant getSellTo() {
    return sellTo;
  }


  /**
   * Sets the value of the 'sellTo' field.
   * @param value the value to set.
   */
  public void setSellTo(java.time.Instant value) {
    this.sellTo = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'soldOut' field.
   * @return The value of the 'soldOut' field.
   */
  public boolean getSoldOut() {
    return soldOut;
  }


  /**
   * Sets the value of the 'soldOut' field.
   * @param value the value to set.
   */
  public void setSoldOut(boolean value) {
    this.soldOut = value;
  }

  /**
   * Gets the value of the 'zones' field.
   * @return The value of the 'zones' field.
   */
  public java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> getZones() {
    return zones;
  }


  /**
   * Sets the value of the 'zones' field.
   * @param value the value to set.
   */
  public void setZones(java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> value) {
    this.zones = value;
  }

  /**
   * Creates a new PlanEvent RecordBuilder.
   * @return A new PlanEvent RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder newBuilder() {
    return new com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder();
  }

  /**
   * Creates a new PlanEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanEvent RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder(other);
    }
  }

  /**
   * Creates a new PlanEvent RecordBuilder by copying an existing PlanEvent instance.
   * @param other The existing instance to copy.
   * @return A new PlanEvent RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlanEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanEvent>
    implements org.apache.avro.data.RecordBuilder<PlanEvent> {

    private long planId;
    private com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan basePlan;
    private com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder basePlanBuilder;
    private java.time.Instant startDate;
    private java.time.Instant endDate;
    private java.time.Instant sellFrom;
    private java.time.Instant sellTo;
    private boolean soldOut;
    private java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> zones;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.planId)) {
        this.planId = data().deepCopy(fields()[0].schema(), other.planId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.basePlan)) {
        this.basePlan = data().deepCopy(fields()[1].schema(), other.basePlan);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasBasePlanBuilder()) {
        this.basePlanBuilder = com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.newBuilder(other.getBasePlanBuilder());
      }
      if (isValidValue(fields()[2], other.startDate)) {
        this.startDate = data().deepCopy(fields()[2].schema(), other.startDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.endDate)) {
        this.endDate = data().deepCopy(fields()[3].schema(), other.endDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sellFrom)) {
        this.sellFrom = data().deepCopy(fields()[4].schema(), other.sellFrom);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sellTo)) {
        this.sellTo = data().deepCopy(fields()[5].schema(), other.sellTo);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.soldOut)) {
        this.soldOut = data().deepCopy(fields()[6].schema(), other.soldOut);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.zones)) {
        this.zones = data().deepCopy(fields()[7].schema(), other.zones);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing PlanEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.planId)) {
        this.planId = data().deepCopy(fields()[0].schema(), other.planId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.basePlan)) {
        this.basePlan = data().deepCopy(fields()[1].schema(), other.basePlan);
        fieldSetFlags()[1] = true;
      }
      this.basePlanBuilder = null;
      if (isValidValue(fields()[2], other.startDate)) {
        this.startDate = data().deepCopy(fields()[2].schema(), other.startDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endDate)) {
        this.endDate = data().deepCopy(fields()[3].schema(), other.endDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sellFrom)) {
        this.sellFrom = data().deepCopy(fields()[4].schema(), other.sellFrom);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sellTo)) {
        this.sellTo = data().deepCopy(fields()[5].schema(), other.sellTo);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.soldOut)) {
        this.soldOut = data().deepCopy(fields()[6].schema(), other.soldOut);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.zones)) {
        this.zones = data().deepCopy(fields()[7].schema(), other.zones);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'planId' field.
      * @return The value.
      */
    public long getPlanId() {
      return planId;
    }


    /**
      * Sets the value of the 'planId' field.
      * @param value The value of 'planId'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setPlanId(long value) {
      validate(fields()[0], value);
      this.planId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'planId' field has been set.
      * @return True if the 'planId' field has been set, false otherwise.
      */
    public boolean hasPlanId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'planId' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearPlanId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'basePlan' field.
      * @return The value.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan getBasePlan() {
      return basePlan;
    }


    /**
      * Sets the value of the 'basePlan' field.
      * @param value The value of 'basePlan'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setBasePlan(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan value) {
      validate(fields()[1], value);
      this.basePlanBuilder = null;
      this.basePlan = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'basePlan' field has been set.
      * @return True if the 'basePlan' field has been set, false otherwise.
      */
    public boolean hasBasePlan() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'basePlan' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder getBasePlanBuilder() {
      if (basePlanBuilder == null) {
        if (hasBasePlan()) {
          setBasePlanBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.newBuilder(basePlan));
        } else {
          setBasePlanBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.newBuilder());
        }
      }
      return basePlanBuilder;
    }

    /**
     * Sets the Builder instance for the 'basePlan' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setBasePlanBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan.Builder value) {
      clearBasePlan();
      basePlanBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'basePlan' field has an active Builder instance
     * @return True if the 'basePlan' field has an active Builder instance
     */
    public boolean hasBasePlanBuilder() {
      return basePlanBuilder != null;
    }

    /**
      * Clears the value of the 'basePlan' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearBasePlan() {
      basePlan = null;
      basePlanBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public java.time.Instant getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setStartDate(java.time.Instant value) {
      validate(fields()[2], value);
      this.startDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearStartDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * @return The value.
      */
    public java.time.Instant getEndDate() {
      return endDate;
    }


    /**
      * Sets the value of the 'endDate' field.
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setEndDate(java.time.Instant value) {
      validate(fields()[3], value);
      this.endDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endDate' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearEndDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellFrom' field.
      * @return The value.
      */
    public java.time.Instant getSellFrom() {
      return sellFrom;
    }


    /**
      * Sets the value of the 'sellFrom' field.
      * @param value The value of 'sellFrom'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setSellFrom(java.time.Instant value) {
      validate(fields()[4], value);
      this.sellFrom = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sellFrom' field has been set.
      * @return True if the 'sellFrom' field has been set, false otherwise.
      */
    public boolean hasSellFrom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sellFrom' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearSellFrom() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellTo' field.
      * @return The value.
      */
    public java.time.Instant getSellTo() {
      return sellTo;
    }


    /**
      * Sets the value of the 'sellTo' field.
      * @param value The value of 'sellTo'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setSellTo(java.time.Instant value) {
      validate(fields()[5], value);
      this.sellTo = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sellTo' field has been set.
      * @return True if the 'sellTo' field has been set, false otherwise.
      */
    public boolean hasSellTo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sellTo' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearSellTo() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'soldOut' field.
      * @return The value.
      */
    public boolean getSoldOut() {
      return soldOut;
    }


    /**
      * Sets the value of the 'soldOut' field.
      * @param value The value of 'soldOut'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setSoldOut(boolean value) {
      validate(fields()[6], value);
      this.soldOut = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'soldOut' field has been set.
      * @return True if the 'soldOut' field has been set, false otherwise.
      */
    public boolean hasSoldOut() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'soldOut' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearSoldOut() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'zones' field.
      * @return The value.
      */
    public java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> getZones() {
      return zones;
    }


    /**
      * Sets the value of the 'zones' field.
      * @param value The value of 'zones'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder setZones(java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone> value) {
      validate(fields()[7], value);
      this.zones = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'zones' field has been set.
      * @return True if the 'zones' field has been set, false otherwise.
      */
    public boolean hasZones() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'zones' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.PlanEvent.Builder clearZones() {
      zones = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanEvent build() {
      try {
        PlanEvent record = new PlanEvent();
        record.planId = fieldSetFlags()[0] ? this.planId : (java.lang.Long) defaultValue(fields()[0]);
        if (basePlanBuilder != null) {
          try {
            record.basePlan = this.basePlanBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("basePlan"));
            throw e;
          }
        } else {
          record.basePlan = fieldSetFlags()[1] ? this.basePlan : (com.fever.plans_management_system.kafka_messaging_contracts.dto.BasePlan) defaultValue(fields()[1]);
        }
        record.startDate = fieldSetFlags()[2] ? this.startDate : (java.time.Instant) defaultValue(fields()[2]);
        record.endDate = fieldSetFlags()[3] ? this.endDate : (java.time.Instant) defaultValue(fields()[3]);
        record.sellFrom = fieldSetFlags()[4] ? this.sellFrom : (java.time.Instant) defaultValue(fields()[4]);
        record.sellTo = fieldSetFlags()[5] ? this.sellTo : (java.time.Instant) defaultValue(fields()[5]);
        record.soldOut = fieldSetFlags()[6] ? this.soldOut : (java.lang.Boolean) defaultValue(fields()[6]);
        record.zones = fieldSetFlags()[7] ? this.zones : (java.util.List<com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanEvent>
    READER$ = (org.apache.avro.io.DatumReader<PlanEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










