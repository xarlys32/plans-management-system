/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fever.plans_management_system.kafka_messaging_contracts.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Zone extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2609250221515259927L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Zone\",\"namespace\":\"com.fever.plans_management_system.kafka_messaging_contracts.dto\",\"fields\":[{\"name\":\"zoneId\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"capacity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"numbered\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Zone> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Zone> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Zone> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Zone> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Zone> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Zone to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Zone from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Zone instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Zone fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long zoneId;
  private java.lang.CharSequence name;
  private int capacity;
  private double price;
  private boolean numbered;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Zone() {}

  /**
   * All-args constructor.
   * @param zoneId The new value for zoneId
   * @param name The new value for name
   * @param capacity The new value for capacity
   * @param price The new value for price
   * @param numbered The new value for numbered
   */
  public Zone(java.lang.Long zoneId, java.lang.CharSequence name, java.lang.Integer capacity, java.lang.Double price, java.lang.Boolean numbered) {
    this.zoneId = zoneId;
    this.name = name;
    this.capacity = capacity;
    this.price = price;
    this.numbered = numbered;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return zoneId;
    case 1: return name;
    case 2: return capacity;
    case 3: return price;
    case 4: return numbered;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: zoneId = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: capacity = (java.lang.Integer)value$; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: numbered = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'zoneId' field.
   * @return The value of the 'zoneId' field.
   */
  public long getZoneId() {
    return zoneId;
  }


  /**
   * Sets the value of the 'zoneId' field.
   * @param value the value to set.
   */
  public void setZoneId(long value) {
    this.zoneId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'capacity' field.
   * @return The value of the 'capacity' field.
   */
  public int getCapacity() {
    return capacity;
  }


  /**
   * Sets the value of the 'capacity' field.
   * @param value the value to set.
   */
  public void setCapacity(int value) {
    this.capacity = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'numbered' field.
   * @return The value of the 'numbered' field.
   */
  public boolean getNumbered() {
    return numbered;
  }


  /**
   * Sets the value of the 'numbered' field.
   * @param value the value to set.
   */
  public void setNumbered(boolean value) {
    this.numbered = value;
  }

  /**
   * Creates a new Zone RecordBuilder.
   * @return A new Zone RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder newBuilder() {
    return new com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder();
  }

  /**
   * Creates a new Zone RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Zone RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder(other);
    }
  }

  /**
   * Creates a new Zone RecordBuilder by copying an existing Zone instance.
   * @param other The existing instance to copy.
   * @return A new Zone RecordBuilder
   */
  public static com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder newBuilder(com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone other) {
    if (other == null) {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder();
    } else {
      return new com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder(other);
    }
  }

  /**
   * RecordBuilder for Zone instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Zone>
    implements org.apache.avro.data.RecordBuilder<Zone> {

    private long zoneId;
    private java.lang.CharSequence name;
    private int capacity;
    private double price;
    private boolean numbered;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.zoneId)) {
        this.zoneId = data().deepCopy(fields()[0].schema(), other.zoneId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.capacity)) {
        this.capacity = data().deepCopy(fields()[2].schema(), other.capacity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.numbered)) {
        this.numbered = data().deepCopy(fields()[4].schema(), other.numbered);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Zone instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.zoneId)) {
        this.zoneId = data().deepCopy(fields()[0].schema(), other.zoneId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.capacity)) {
        this.capacity = data().deepCopy(fields()[2].schema(), other.capacity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numbered)) {
        this.numbered = data().deepCopy(fields()[4].schema(), other.numbered);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'zoneId' field.
      * @return The value.
      */
    public long getZoneId() {
      return zoneId;
    }


    /**
      * Sets the value of the 'zoneId' field.
      * @param value The value of 'zoneId'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder setZoneId(long value) {
      validate(fields()[0], value);
      this.zoneId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'zoneId' field has been set.
      * @return True if the 'zoneId' field has been set, false otherwise.
      */
    public boolean hasZoneId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'zoneId' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder clearZoneId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'capacity' field.
      * @return The value.
      */
    public int getCapacity() {
      return capacity;
    }


    /**
      * Sets the value of the 'capacity' field.
      * @param value The value of 'capacity'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder setCapacity(int value) {
      validate(fields()[2], value);
      this.capacity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'capacity' field has been set.
      * @return True if the 'capacity' field has been set, false otherwise.
      */
    public boolean hasCapacity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'capacity' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder clearCapacity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'numbered' field.
      * @return The value.
      */
    public boolean getNumbered() {
      return numbered;
    }


    /**
      * Sets the value of the 'numbered' field.
      * @param value The value of 'numbered'.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder setNumbered(boolean value) {
      validate(fields()[4], value);
      this.numbered = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'numbered' field has been set.
      * @return True if the 'numbered' field has been set, false otherwise.
      */
    public boolean hasNumbered() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'numbered' field.
      * @return This builder.
      */
    public com.fever.plans_management_system.kafka_messaging_contracts.dto.Zone.Builder clearNumbered() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Zone build() {
      try {
        Zone record = new Zone();
        record.zoneId = fieldSetFlags()[0] ? this.zoneId : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.capacity = fieldSetFlags()[2] ? this.capacity : (java.lang.Integer) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.numbered = fieldSetFlags()[4] ? this.numbered : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Zone>
    WRITER$ = (org.apache.avro.io.DatumWriter<Zone>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Zone>
    READER$ = (org.apache.avro.io.DatumReader<Zone>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.zoneId);

    out.writeString(this.name);

    out.writeInt(this.capacity);

    out.writeDouble(this.price);

    out.writeBoolean(this.numbered);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.zoneId = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.capacity = in.readInt();

      this.price = in.readDouble();

      this.numbered = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.zoneId = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.capacity = in.readInt();
          break;

        case 3:
          this.price = in.readDouble();
          break;

        case 4:
          this.numbered = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










