
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.fever.plans_management_system'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	avroTools
}

repositories {
	mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
}

dependencies {
	implementation libs.avro
    implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.4.3'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.session:spring-session-data-redis'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.confluent:kafka-avro-serializer:7.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.30'
}

tasks.register('customAvroCodeGeneration', Exec) {
	def avroToolsConfig = configurations.detachedConfiguration(
			dependencies.create("org.apache.avro:avro-tools:1.11.1")
	)
	avroToolsConfig.transitive = false

	def avroToolsJar = avroToolsConfig.resolve().find { it.name.contains("avro-tools") }

	if (!avroToolsJar) {
		throw new GradleException("No se encontr√≥ avro-tools JAR.")
	}

	def avroSchemasDir = file("src/main/java/com/fever/plans_management_system/kafka_messaging_contracts/avro")
	def avroOutputDir = file("src/main/java")

	inputs.dir(avroSchemasDir)
	outputs.dir(avroOutputDir)

	commandLine = [
			"java", "-jar", avroToolsJar.absolutePath,
			"compile", "schema",
			avroSchemasDir.absolutePath,
			avroOutputDir.absolutePath
	]
}

tasks.withType(JavaCompile).configureEach {
	dependsOn('customAvroCodeGeneration')
}

tasks.named('test') {
	useJUnitPlatform()
}
